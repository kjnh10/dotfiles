[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/unite.vim'
hook_source = '''
"Uniteの設定"{{{
""""""""""""""""""""""""""""""
  "基本的な設定
  let g:unite_source_file_mru_long_limit = 3000
  let g:unite_source_directory_mru_long_limit = 3000
  let g:unite_source_file_mru_limit = 250
  let g:unite_enable_start_insert = 1
  let g:unite_enable_ignore_case = 1
  let g:unite_enable_smart_case = 1
  let g:unite_source_history_yank_enable = 1
  "let g:unite_source_rec_max_cache_files = 50000
  "call unite#filters#matcher_default#use(['matcher_fuzzy'])
  "
  call unite#custom_default_action('source/bookmark/directory' , 'vimfiler') "bookmarkはvimfilerと連携

  if has("win32") || has("win64")
    " let g:unite_source_find_command = "C:/cygwin64/bin/find.exe"
  endif
  " Using ag as recursive command.
  " unite grep に pt(The Silver Searcher) を使う
  if executable('pt')
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --smart-case'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_grep_encoding = 'utf-8'
  endif
  " grep検索
  nnoremap <silent> <Leader>ug  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
  " カーソル位置の単語をgrep検索
  nnoremap <silent> <Leader>cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
  " grep検索結果の再呼出
  nnoremap <silent> <Leader>urg  :<C-u>UniteResume search-buffer<CR>

  "開始キーの設定
  nnoremap <leader>uf :<C-u>Unite -start-insert file<CR>
  nnoremap <leader>ur :<C-u>Unite -start-insert file_rec<CR>
  nnoremap <leader>m :<C-u>Unite -start-insert file_mru bookmark file<CR>
  nnoremap <leader>p :<C-u>Unite file_rec/async<CR>
  nnoremap <leader>c :<C-u>Unite history/yank<CR>
  nnoremap <leader>t :<C-u>Unite -start-insert tab<CR>
  nnoremap <silent> <leader>b :<C-u>Unite bookmark -start-insert<CR>
  "nnoremap <silent> <leader>bp :<C-u>Unite bookmark:project<CR>


  " unite.vim上でのキーマッピング
  autocmd MyAutoCmd FileType unite call s:unite_my_settings()
  function! s:unite_my_settings()
    "buffer local map は優先度が高いので、<buffer>を付けないとunite defualt mappingを上書き出来ない事に注意
    " nmap <silent><buffer> i <Plug>(unite_loop_cursor_up)
    " nmap <silent><buffer> k <Plug>(unite_loop_cursor_down)
    nmap <silent><buffer> a <Plug>(unite_insert_enter)
    nmap <silent><buffer> <esc> q
    imap <silent><buffer> <Down> <Plug>(unite_select_next_line)
    imap <silent><buffer> <Up> <Plug>(unite_select_previous_line)
    nnoremap <silent><buffer><expr> vf unite#do_action('vimfiler')
    nmap <silent><buffer> t [Tag]
    nmap <silent><buffer> <c-l> :tabnext<cr>

    "unmapしようとするとマップがないと言われる。>> unmap <buffer>でglobalに設定されているmapを削除する事は出来ない
    "これでは改善できない。なぜ？
    "let s:loaded_unmap_escesc = 0
    "if s:loaded_unmap_escesc != 1
    "	 nunmap <buffer> <ESC><ESC>
    "	 let s:loaded_unmap_escesc = 1
    "endif
  endfunction
  "au MyAutoCmd BufEnter *[unite]* nunmap <esc><esc>
  "au MyAutoCmd BufLeave *[unite]* nmap <esc><esc> :nohlsearch<CR>
  "au MyAutoCmd BufEnter *.py nunmap <esc><esc>
  "
  noremap [unite] <Nop>
  map     <Leader>u [unite]
  nnoremap <silent>[unite]p         :<C-u>Unite file_rec/async<CR>
  nnoremap <silent>[unite]g         :<C-u>Unite ghq<CR>
"}}}
'''

[[plugins]]
repo = 'tyru/caw.vim' # commnet toggle
hook_source = '''
nmap <Leader>" <Plug>(caw:hatpos:toggle)
vmap <Leader>" <Plug>(caw:hatpos:toggle)
nmap <c-_> <Plug>(caw:hatpos:toggle)
vmap <c-_> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/vimfiler'
hook_source = '''
"{{{
""""""""""""""""""""""""""""""
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_ignore_pattern='\(^\.\|\~$\|\.pyc$\|\.[oad]$\)'

"この変数はexecute_vimfiler_associated(enterにmapping)で何をするかコントロールする。
let g:vimfiler_execute_file_list = {}
let g:vimfiler_execute_file_list = {
  \ "_" : "vim",
  \ "xlsx" : "open",
  \ "xlam" : "open",
  \ "xlsm" : "open"}

" call vimfiler#custom#profile('default', 'context', {
"      \ 'quit' : 0,
"      \ 'safe' : 0,
"      \ 'winwidth' : 35,
"      \ 'toggle' : 1,
"      \ 'simple' : 0,
"      \ 'split' : 1,
"      \ })
"
call vimfiler#custom#profile('default', 'context', {
     \ 'safe' : 0,
     \ 'toggle' : 0,
     \ 'simple' : 0,
     \ 'split' : 0,
     \ 'quit' : 1,
     \ })

nnoremap <leader>f :<C-u>VimFilerBufferDir<CR>
nnoremap <leader>F :<C-u>VimFiler -nosimple<CR>

" vimfiler上でのキーマッピング
autocmd MyAutoCmd FileType vimfiler call s:vimfiler_my_settings()
function! s:vimfiler_my_settings()
	"タブ移動,historyとかをつぶしている。
	nmap <silent><buffer> t [tag]
	nnoremap <silent><buffer> [tag]n :TABNEW<CR>
	nnoremap <silent><buffer> [tag]h :tabprevious<CR>
	nnoremap <silent><buffer> [tag]l :tabnext<CR>
	nnoremap <silent><buffer> [tag]q :tabclose<CR>
	nmap <silent><buffer> <c-r> <plug>(vimfiler_redraw_screen)
	"その他
	nmap <silent><buffer> <A-Up> <Plug>(vimfiler_smart_h)
	nmap <silent><buffer> f <Plug>(vimfiler_toggle_mark_current_line)
	nmap <silent><buffer> i <Plug>(vimfiler_choose_action)
	nmap <silent><buffer> F <Plug>(vimfiler_toggle_mark_all_lines)
	nmap <silent><buffer> vs <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_popup_shell)
	nmap <silent><buffer> <C-CR> <Plug>(vimfiler_choose_action)tabopen<cr>
	nmap <silent><buffer> du <Plug>(vimfiler_switch_to_another_vimfiler)

	nmap <buffer><expr> <CR> vimfiler#smart_cursor_map(
				\  "\<Plug>(vimfiler_cd_file)",
				\  "\<Plug>(vimfiler_edit_file)")

	nmap <buffer> yy
	\ <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_clipboard_copy_file)
	nmap <buffer> p
	\ <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_clipboard_paste)
	nmap <buffer> m
	\ <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_clipboard_move_file)

endfunction

"}}}
'''

[[plugins]]
repo = 'tyru/vim-altercmd' #http://qiita.com/kentaro/items/c3f7fc1d1be0e106735b
hook_source = '''
  "カスタムコマンドの先頭を小文字にする。
  call altercmd#load()
    AlterCommand unite Unite
    AlterCommand gstatus Gstatus
    AlterCommand path Path
    AlterCommand fpath FullPath
    AlterCommand vo VO
  cd ~/
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'kassio/neoterm'
hook_source = '''
  let g:neoterm_default_mod='vertical'
  let g:neoterm_autoinsert = 1
  let g:neoterm_autoscroll = 1
'''

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # neosnippet
repo = 'Shougo/neosnippet'
hook_source = '''
  "Ctrl+Kにターゲットジャンプ割当{{{
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
	let g:neosnippet#enable_snipmate_compatibility = 1
	let g:neosnippet#disable_runtime_snippets = {'_' : 1}
	let g:neosnippet#snippets_directory = ['~/.cache/dein/.cache/init.vim/.dein/neosnippets']
	let g:neosnippet#snippets_directory += ['~/.cache/dein/.cache/init.vim/.dein/snippets']

  "}}}
'''
on_i  = 1
on_ft = ['snippet']

[[plugins]] # deoplete
repo = 'Shougo/deoplete.nvim'
hook_source = '''
  let g:deoplete#enable_at_startup = 1"
'''
on_i = 1

[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add='''
  let g:lsp_signs_enabled = 1         " enable signs
  let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
  let g:lsp_signs_error = {'text': '✗'}
  let g:lsp_signs_warning = {'text': '‼'}
  if executable('pyls')
      " pip install python-language-server
      au User lsp_setup call lsp#register_server({
          \ 'name': 'pyls',
          \ 'cmd': {server_info->['pyls']},
          \ 'whitelist': ['python'],
          \ })
  endif
'''

[[plugins]]
repo='prabirshrestha/asyncomplete.vim'
[[plugins]]
repo='prabirshrestha/asyncomplete-lsp.vim'

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # カラースキーマ
# repo = 'w0ng/vim-hybrid'
repo = 'mrkn/mrkn256.vim'
hook_add = '''
  set background=dark"{{{
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  au MyAutoCmd VimEnter * nested colorscheme mrkn256"}}}
'''

[[plugins]]
repo = 'kjnh10/mysetting.vim'

[[plugins]]
repo = 'kjnh10/gcc-syntax-highlight'

[[plugins]]
repo = 'w0rp/ale'
hook_source = '''
  let g:ale_sign_column_always = 1
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 0
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '--'
  " highlight clear ALEErrorSign
  highlight clear ALEWarningSign
  " flake8はうるさいのでpyflake8にしておく。
  let g:ale_linters = {
      \   'python': ['pyls'],
      \   'cpp': ['gcc'],
      \}
  let g:ale_cpp_gcc_options = "-std=c++14 -Wall -DPCM"
  map <leader>at :ALEToggle<CR>
'''
hook_add = '''
  ALEToggle
'''


[[plugins]]
repo =  'tmhedberg/SimpylFold.git'
hook_source = '''
  let g:SimpylFold_docstring_preview = 1
'''

[[plugins]]
repo =  'thinca/vim-quickrun'
hook_source = '''
  " 設定{{{
  if !exists("g:quickrun_config")
    let g:quickrun_config={}
  endif
  " デフォルトの設定
  let g:quickrun_config._ = {
        \ 'runner'    : 'vimproc',
        \ 'runner/vimproc/updatetime' : 60,
        \ 'outputter' : 'error',
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error'   : 'quickfix',
        \ 'outputter/buffer/close_on_empty' : 1,
        \ }
  let g:quickrun_config.python = {
        \ "hook/eval/template" : "",
        \ 'command': 'python',
        \ "hook/output_encode/encoding" : "utf-8",
        \}
  let g:quickrun_config.cpp = {
        \ 'command': 'g++',
        \ 'cmdopt' : "-std=c++14 -DINPUT_FROM_FILE",
        \}
  let g:quickrun_config.markdown = {
        \ 'outputter' : 'browser',
        \ 'command' : 'pandoc',
        \ 'cmdopt' : '-s -f markdown',
        \ }
  command! -nargs=0 Pyver let g:quickrun_config.python.command = "python"
  command! -nargs=0 Pyver3 let g:quickrun_config.python.command = "python3"

  nnoremap <Leader>ll :write<CR>:cclose<CR>:QuickRun -mode n<CR>
  vnoremap <Leader>ll :QuickRun -mode v<CR>

  "quickrunのために設定. 下では解決しなかったので暫定的に
  let $PATH= $HOME."/.pyenv/shims:" . $PATH
  "http://stackoverflow.com/questions/9853584/how-to-use-correct-ruby-in-vim-how-to-modify-path-in-vim/12146694#12146694
  "}}}
'''

[[plugins]]
repo =  'airblade/vim-gitgutter'
[[plugins]]
repo =  'ntpeters/vim-better-whitespace.git'
hook_source = '''
  let g:better_whitespace_enabled=0
  let g:strip_whitespace_on_save=1
'''

# [[plugins]]
# repo =  'airblade/vim-rooter'

[[plugins]]
repo = 'vim-scripts/ViewOutput'  #VO

[[plugins]]
repo = 'ujihisa/unite-colorscheme'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_source = '''
  let g:airline_section_c = '%-0.20{getcwd()}'
  let g:airline_section_x = '%<%<%{airline#extensions#fugitiveline#bufname()}%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
" <Leader>f{char} to move to {char}
  map  f <Plug>(easymotion-bd-f)
  nmap f <Plug>(easymotion-overwin-f)

  " s{char}{char} to move to {char}{char}
  nmap s <Plug>(easymotion-overwin-f2)
" # '''

[[plugins]]
repo = 'luochen1990/rainbow.git'
hook_add = '''
  let g:rainbow_active = 1
'''
